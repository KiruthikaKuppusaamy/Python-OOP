# Abstract Method

from abc import ABC, abstractmethod

# Abstract class
class Vehicle(ABC):
    @abstractmethod
    def start(self):
        pass   # only declaration, no implementation

# Subclass must implement the abstract method
class Car(Vehicle):
    def start(self):
        print("Car starts with a key.")

class Bike(Vehicle):
    def start(self):
        print("Bike starts with a button.")


# Usage
v1 = Car()
v1.start()

v2 = Bike()
v2.start()

_______________________________________________________________________________________________

# Absract and Concrete Method

from abc import ABC, abstractmethod

# Abstract class
class Shape(ABC):

    @abstractmethod
    def area(self):      # Abstract method (only declared, no body)
        pass

    def describe(self):  # Concrete method (has body, common for all)
        print("This is a shape.")

# Subclass implementing abstract method
class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):      # Must implement abstract method
        return 3.14 * self.radius * self.radius


# Usage
c = Circle(5)
c.describe()             # Concrete method (inherited as is)
print("Circle Area:", c.area())  # Abstract method implemented in subclass

#v = Vehicle()  # ‚ùå Error! Cannot create object of abstract class
