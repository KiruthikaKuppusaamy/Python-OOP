# Simple Attributes

class College:
    dept = ""
    strength = 0
    
c = College()
c.dept = "ECE"
c.strength = 14

v = College()
v.dept = "VLSI"
v.strength = 45

print("Depts are :",c.dept,"and",v.dept)

______________________________________________________________________

# Methods

# create a class
class Room:
    length = 0.0
    breadth = 0.0
    
    # method to calculate area
    def calculate_area(self):
        print("Area of Room =", self.length * self.breadth)

# create object of Room class
study_room = Room()

# assign values to all the properties 
study_room.length = 42.5
study_room.breadth = 30.8

# access method inside class
study_room.calculate_area()

____________________________________________________________________________________

# Method Prg 2

class add:
     a = b = 0
     
     def addition(self):
         print("Total is :",self.a + self.b)

eval1 = add()

eval1.a = 3
eval1.b = 5
eval1.addition()

eval2 = add()

eval2.a,eval2.b = 6,7
eval2.addition()

__________________________________________________________________________________________

# Constructor

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name,"! and I am",self.age,"years old")

p1 = Person("John", 36)
p1.myfunc()

p2 = Person("Rangasamy",70)
p2.myfunc()

____________________________________________________________________________________________

#Inheritance

# Single Inheritance
class Dog:
    def __init__(self, name):
        self.name = name

    def display_name(self):
        print("Dog's Name:",self.name)

class Labrador(Dog):       # Single Inheritance
    def sound(self):
        print("Labrador woofs")

# Multilevel Inheritance
class GuideDog(Labrador):  # Multilevel Inheritance
    def guide(self):
        print(self.name,"Guides the way!")

# Multiple Inheritance
class Friendly:
    def greet(self):
        print("Friendly!")

class GoldenRetriever(Dog, Friendly):  # Multiple Inheritance
    def sound(self):
        print("Golden Retriever Barks")

# Example Usage
lab = Labrador("Buddy")
lab.display_name()
lab.sound()

guide_dog = GuideDog("Max")
guide_dog.display_name()
guide_dog.guide()

retriever = GoldenRetriever("Charlie")
retriever.display_name()
retriever.greet()
retriever.sound()

______________________________________________________________________________

# Method Overriding

class Animal:

    # attributes and method of the parent class
    name = ""
    
    def eat(self):
        print("I can eat")

# inherit from Animal
class Dog(Animal):

    # override eat() method
    def eat(self):
        print("I like to eat bones")

# create an object of the subclass
labrador = Dog()

# call the eat() method on the labrador object
labrador.eat()

________________________________________________________________
# Overriding example 1

class one:
    def add1(self):
        print("I am first")

class two(one):
    def add2(self):
        print("I am second")

t = two()
t.add1()
t.add2()

_______________________________________________________________________________

# Polymorphism

class Cat:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def info(self):
        print(f"I am a cat. My name is {self.name}. I am {self.age} years old.")

    def make_sound(self):
        print("Meow")


class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def info(self):
        print(f"I am a dog. My name is {self.name}. I am {self.age} years old.")

    def make_sound(self):
        print("Bark")


cat1 = Cat("Kitty", 2.5)
dog1 = Dog("Fluffy", 4)

for animal in (cat1, dog1):
    animal.make_sound()
    animal.info()
    animal.make_sound()
